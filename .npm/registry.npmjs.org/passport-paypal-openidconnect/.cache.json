{"_id":"passport-paypal-openidconnect","_rev":"9-4bd9e0355e0576a61918fa78672886b3","name":"passport-paypal-openidconnect","description":"PayPal (OpenIDConnect) authentication strategy for Passport.","dist-tags":{"latest":"0.1.1"},"versions":{"0.1.0":{"name":"passport-paypal-openidconnect","version":"0.1.0","description":"PayPal (OpenIDConnect) authentication strategy for Passport.","keywords":["passport","paypal","auth","authn","authentication","identity"],"repository":{"type":"git","url":"git://github.com/shekhei/passport-paypal-openidconnect.git"},"bugs":{"url":"http://github.com/shekhei/passport-paypal-openidconnect/issues"},"author":{"name":"Wong Shek Hei","email":"shekhei@gmail.com","url":"http://www.shekhei.com"},"licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/MIT"}],"main":"./lib/passport-paypal-oauth","dependencies":{"pkginfo":"0.2.x","passport-oauth":"~0.1.2"},"devDependencies":{"vows":"0.6.x"},"scripts":{"test":"NODE_PATH=lib node_modules/.bin/vows test/*-test.js"},"engines":{"node":">= 0.4.0"},"readme":"# Passport-PayPal-Openidconnect\n\nThis is a fork from Passport-PayPal-OAuth, to modify it to support openidconnect paypal auth instead(work in progress to complete the fork)\n\n\n[Passport](http://passportjs.org/) strategy for authenticating with [PayPal](http://www.paypal.com/)\nusing the OpenIDConnect API.\n\nThis module lets you authenticate using PayPal in your Node.js applications.\nBy plugging into Passport, PayPal authentication can be easily and\nunobtrusively integrated into any application or framework that supports\n[Connect](http://www.senchalabs.org/connect/)-style middleware, including\n[Express](http://expressjs.com/).\n\n## Install\n\n    $ npm install passport-paypal-openidconnect\n\n## Usage\n\n#### Configure Strategy\n\nThe PayPal authentication strategy authenticates users using a PayPal\naccount and OAuth 2.0 tokens.  The strategy requires a `verify` callback, which\naccepts these credentials and calls `done` providing a user, as well as\n`options` specifying a app ID, app secret, and callback URL.\n\n    passport.use(new PayPalStrategy({\n        clientID: PAYPAL_APP_ID,\n        clientSecret: PAYPAL_APP_SECRET,\n        callbackURL: \"http://localhost:3000/auth/paypal/callback\"\n        authorizationURL: \"https://www.paypal.com/webapps/auth/protocol/openidconnect/v1/authorize\",\n        tokenURL: \"https://www.paypal.com/webapps/auth/protocol/openidconnect/v1/tokenservice\",\n        profileURL: \"https://www.paypal.com/webapps/auth/protocol/openidconnect/v1/userinfo\"\n      },\n      function(accessToken, refreshToken, profile, done) {\n        User.findOrCreate({ paypalId: profile.id }, function (err, user) {\n          return done(err, user);\n        });\n      }\n    ));\n\n#### Authenticate Requests\n\nUse `passport.authenticate()`, specifying the `'paypal'` strategy, to\nauthenticate requests.\n\nFor example, as route middleware in an [Express](http://expressjs.com/)\napplication:\n\n    app.get('/auth/paypal',\n      passport.authenticate('paypal'));\n\n    app.get('/auth/paypal/callback', \n      passport.authenticate('paypal', { failureRedirect: '/login' }),\n      function(req, res) {\n        // Successful authentication, redirect home.\n        res.redirect('/');\n      });\n\n## Examples\n\nFor a complete, working example, refer to the [login example](https://github.com/jaredhanson/passport-paypal-oauth/tree/master/examples/login).\n\n## Tests\n\n    $ npm install --dev\n    $ make test\n\n[![Build Status](https://secure.travis-ci.org/jaredhanson/passport-paypal-oauth.png)](http://travis-ci.org/jaredhanson/passport-paypal-oauth)\n\n## Credits\n\n  - [Jared Hanson](http://github.com/jaredhanson)\n\n## License\n\n[The MIT License](http://opensource.org/licenses/MIT)\n\nCopyright (c) 2012-2013 Jared Hanson <[http://jaredhanson.net/](http://jaredhanson.net/)>\n","readmeFilename":"README.md","_id":"passport-paypal-openidconnect@0.1.0","dist":{"shasum":"ceeb62f6e74dc51420fb16b5124b9b44cacbbd6a","tarball":"http://registry.npmjs.org/passport-paypal-openidconnect/-/passport-paypal-openidconnect-0.1.0.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"shekhei","email":"shekhei@gmail.com"},"maintainers":[{"name":"shekhei","email":"shekhei@gmail.com"}],"directories":{}},"0.1.1":{"name":"passport-paypal-openidconnect","version":"0.1.1","description":"PayPal (OpenIDConnect) authentication strategy for Passport.","keywords":["passport","paypal","auth","authn","authentication","identity","openid-connect"],"repository":{"type":"git","url":"git://github.com/shekhei/passport-paypal-openidconnect.git"},"bugs":{"url":"http://github.com/shekhei/passport-paypal-openidconnect/issues"},"author":{"name":"Wong Shek Hei","email":"shekhei@gmail.com","url":"http://www.shekhei.com"},"licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/MIT"}],"main":"./lib/passport-paypal-openidconnect","dependencies":{"pkginfo":"0.2.x","passport-openidconnect":"*"},"devDependencies":{"vows":"0.6.x"},"scripts":{"test":"NODE_PATH=lib node_modules/.bin/vows test/*-test.js"},"engines":{"node":">= 0.4.0"},"readme":"# Passport-PayPal-Openidconnect\n\n##This is a fork from Passport-PayPal-OAuth, to modify it to support openidconnect paypal auth instead(work in progress to complete the fork)\n\n\n[Passport](http://passportjs.org/) strategy for authenticating with [PayPal](http://www.paypal.com/)\nusing the OpenIDConnect API.\n\nThis module lets you authenticate using PayPal in your Node.js applications.\nBy plugging into Passport, PayPal authentication can be easily and\nunobtrusively integrated into any application or framework that supports\n[Connect](http://www.senchalabs.org/connect/)-style middleware, including\n[Express](http://expressjs.com/).\n\n## Install\n\n    $ npm install passport-paypal-openidconnect\n\n## Usage\n\n#### Configure Strategy\n\nThe PayPal authentication strategy authenticates users using a PayPal\naccount and OAuth 2.0 tokens.  The strategy requires a `verify` callback, which\naccepts these credentials and calls `done` providing a user, as well as\n`options` specifying a app ID, app secret, and callback URL.\n\n    passport.use(new PayPalStrategy({\n        clientID: PAYPAL_APP_ID,\n        clientSecret: PAYPAL_APP_SECRET,\n        callbackURL: \"http://localhost:3000/auth/paypal/callback\"\n        authorizationURL: \"https://www.paypal.com/webapps/auth/protocol/openidconnect/v1/authorize\",\n        tokenURL: \"https://www.paypal.com/webapps/auth/protocol/openidconnect/v1/tokenservice\",\n        profileURL: \"https://www.paypal.com/webapps/auth/protocol/openidconnect/v1/userinfo\"\n      },\n      function(accessToken, refreshToken, profile, done) {\n        User.findOrCreate({ paypalId: profile.id }, function (err, user) {\n          return done(err, user);\n        });\n      }\n    ));\n\n#### Authenticate Requests\n\nUse `passport.authenticate()`, specifying the `'paypal'` strategy, to\nauthenticate requests.\n\nFor example, as route middleware in an [Express](http://expressjs.com/)\napplication:\n\n    app.get('/auth/paypal',\n      passport.authenticate('paypal'));\n\n    app.get('/auth/paypal/callback', \n      passport.authenticate('paypal', { failureRedirect: '/login' }),\n      function(req, res) {\n        // Successful authentication, redirect home.\n        res.redirect('/');\n      });\n\n#### Providing nonce\nYou can provide a function to PayPalStrategy for the nonce\n\n    passport.use(new PayPalStrategy({\n        clientID: PAYPAL_APP_ID,\n        clientSecret: PAYPAL_APP_SECRET,\n        callbackURL: \"http://localhost:3000/auth/paypal/callback\"\n        authorizationURL: \"https://www.paypal.com/webapps/auth/protocol/openidconnect/v1/authorize\",\n        tokenURL: \"https://www.paypal.com/webapps/auth/protocol/openidconnect/v1/tokenservice\",\n        profileURL: \"https://www.paypal.com/webapps/auth/protocol/openidconnect/v1/userinfo\",\n        nonce: function(respond) {\n          respond(generateSomeId)\n        }\n      },\n      function(accessToken, refreshToken, profile, done) {\n        User.findOrCreate({ paypalId: profile.id }, function (err, user) {\n          return done(err, user);\n        });\n      }\n    ));\n\n## Tests\n\n    $ npm install --dev\n    $ make test\n\n[![Build Status](https://secure.travis-ci.org/jaredhanson/passport-paypal-oauth.png)](http://travis-ci.org/jaredhanson/passport-paypal-oauth)\n\n## Credits\n\n  - [Jared Hanson](http://github.com/jaredhanson)\n\n## License\n\n[The MIT License](http://opensource.org/licenses/MIT)\n","readmeFilename":"README.md","_id":"passport-paypal-openidconnect@0.1.1","dist":{"shasum":"158f07ca4e842077295411d3c05d02b256bed52d","tarball":"http://registry.npmjs.org/passport-paypal-openidconnect/-/passport-paypal-openidconnect-0.1.1.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"shekhei","email":"shekhei@gmail.com"},"maintainers":[{"name":"shekhei","email":"shekhei@gmail.com"}],"directories":{}}},"readme":"# Passport-PayPal-Openidconnect\n\nThis is a fork from Passport-PayPal-OAuth, to modify it to support openidconnect paypal auth instead(work in progress to complete the fork)\n\n\n[Passport](http://passportjs.org/) strategy for authenticating with [PayPal](http://www.paypal.com/)\nusing the OpenIDConnect API.\n\nThis module lets you authenticate using PayPal in your Node.js applications.\nBy plugging into Passport, PayPal authentication can be easily and\nunobtrusively integrated into any application or framework that supports\n[Connect](http://www.senchalabs.org/connect/)-style middleware, including\n[Express](http://expressjs.com/).\n\n## Install\n\n    $ npm install passport-paypal-openidconnect\n\n## Usage\n\n#### Configure Strategy\n\nThe PayPal authentication strategy authenticates users using a PayPal\naccount and OAuth 2.0 tokens.  The strategy requires a `verify` callback, which\naccepts these credentials and calls `done` providing a user, as well as\n`options` specifying a app ID, app secret, and callback URL.\n\n    passport.use(new PayPalStrategy({\n        clientID: PAYPAL_APP_ID,\n        clientSecret: PAYPAL_APP_SECRET,\n        callbackURL: \"http://localhost:3000/auth/paypal/callback\"\n        authorizationURL: \"https://www.paypal.com/webapps/auth/protocol/openidconnect/v1/authorize\",\n        tokenURL: \"https://www.paypal.com/webapps/auth/protocol/openidconnect/v1/tokenservice\",\n        profileURL: \"https://www.paypal.com/webapps/auth/protocol/openidconnect/v1/userinfo\"\n      },\n      function(accessToken, refreshToken, profile, done) {\n        User.findOrCreate({ paypalId: profile.id }, function (err, user) {\n          return done(err, user);\n        });\n      }\n    ));\n\n#### Authenticate Requests\n\nUse `passport.authenticate()`, specifying the `'paypal'` strategy, to\nauthenticate requests.\n\nFor example, as route middleware in an [Express](http://expressjs.com/)\napplication:\n\n    app.get('/auth/paypal',\n      passport.authenticate('paypal'));\n\n    app.get('/auth/paypal/callback', \n      passport.authenticate('paypal', { failureRedirect: '/login' }),\n      function(req, res) {\n        // Successful authentication, redirect home.\n        res.redirect('/');\n      });\n\n## Examples\n\nFor a complete, working example, refer to the [login example](https://github.com/jaredhanson/passport-paypal-oauth/tree/master/examples/login).\n\n## Tests\n\n    $ npm install --dev\n    $ make test\n\n[![Build Status](https://secure.travis-ci.org/jaredhanson/passport-paypal-oauth.png)](http://travis-ci.org/jaredhanson/passport-paypal-oauth)\n\n## Credits\n\n  - [Jared Hanson](http://github.com/jaredhanson)\n\n## License\n\n[The MIT License](http://opensource.org/licenses/MIT)\n\nCopyright (c) 2012-2013 Jared Hanson <[http://jaredhanson.net/](http://jaredhanson.net/)>\n","maintainers":[{"name":"shekhei","email":"shekhei@gmail.com"}],"time":{"modified":"2013-04-23T06:58:47.744Z","created":"2013-03-25T10:19:57.175Z","0.1.0":"2013-03-25T10:20:01.999Z","0.1.1":"2013-04-23T06:58:47.744Z"},"author":{"name":"Wong Shek Hei","email":"shekhei@gmail.com","url":"http://www.shekhei.com"},"repository":{"type":"git","url":"git://github.com/shekhei/passport-paypal-openidconnect.git"},"_attachments":{},"_etag":"\"5FNEBIEKQ0X1IVVVNNXCS3DSF\""}